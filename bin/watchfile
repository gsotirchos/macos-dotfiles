#!/usr/bin/env bash

TIMEOUT=0.4
LATENCY=0.1

# usage
USAGE="Usage:\n    $(basename "$0") [-c] FILE COMMAND"

# parse arguments
args=()
for arg in "$@"; do
    case "${arg}" in
        "-h" | "--help")
            echo -e "${USAGE}"
            exit 0
            ;;
        "-c" | "--clear")
            has_clear="true"
            shift 1
            ;;
        *)
            args+=("${arg}")
            ;;
    esac
done

if [[ "${#args[@]}" -ne 2 ]]; then
    echo -e "${USAGE}"
    exit 1
fi

watched_file="$(realpath "${args[0]}")"
command_string="$(envsubst <<< "${args[1]}")"

# functions to print timestamped formatted message
message() {
    echo -e "[$(date "+%T.%3N")] $*"
}

message_bold() {
    # styling
    local BIWHITE_TEXT='\033[1;97m'
    local RESET='\033[0m'

    echo -en "${BIWHITE_TEXT}"
    message "$*"
    echo -en "${RESET}"
}

# function to execute command
execute_command() {
    local RED_TEXT='\033[31m'
    local GREEN_TEXT='\033[32m'
    local BLUE_TEXT='\033[34m'
    local RESET='\033[0m'

    # kill internal processes on exit
    trap 'jobs -p | xargs kill &> /dev/null' EXIT INT

    # clear display
    if [[ "${has_clear}" == "true" ]]; then
        clear
    fi

    message_bold "Executing ==================================================="

    if eval "${command_string}"; then
        message_bold "${GREEN_TEXT}Finished ====================================================${RESET}"
    else
        message_bold "${RED_TEXT}Failed ======================================================${RESET}"
    fi

    message "Watching ${BLUE_TEXT}${watched_file}${RESET}..."
}

# function to kill a process and wait for it
kill_and_wait() {
    local exec_pid="$1"
    kill "${exec_pid}" &> /dev/null
    wait "${exec_pid}" &> /dev/null
}

# function to check if a file's checksum changed after an event
wait_for_changes() {
    local watched_file="$1"
    local timeout="$2"

    local old_checksum="$(sha1sum "${watched_file}")"
    local new_checksum="${old_checksum}"
    local args=(
        "${watched_file}" "--recursive" "--follow-links" "--one-event" "--latency" "${LATENCY}"
    )

    # as long as the checksum remains the same...
    while [[ "${new_checksum}" == "${old_checksum}" ]]; do
        # if a timeout is specified...
        if [[ -n "${timeout}" ]]; then
            # and no file event is detected...
            if [[ "$(timeout --foreground "${timeout}" fswatch "${args[@]}")" == "" ]]; then
                # exit with failure
                return 1
            else
                # get the new checksum
                new_checksum="$(sha1sum "${watched_file}")"
            fi
        else
            # wait for an event and then get the checksum
            new_checksum="$(sha1sum "$(fswatch "${args[@]}")")"
        fi
    done

    return 0
}

main() {
    local exec_pid

    # exit script on ctrl-c
    trap 'echo & message "Terminated" && kill "${exec_pid}" &> /dev/null & exit 1' INT

    # execute command once first
    execute_command &
    exec_pid=$!

    # watch file for changes, terminate and re-execute
    while true; do
        # wait for changes...
        wait_for_changes "${watched_file}"
        message "File changed (aborting any execution)"

        # interrupt current execution
        kill_and_wait "${exec_pid}"

        # keep watching for ${timeout} seconds for further changes
        while wait_for_changes "${watched_file}" "${TIMEOUT}"; do
            message "Waiting for further changes..."
        done

        # execute command
        execute_command &
        exec_pid=$!
    done
}

main
unset main
